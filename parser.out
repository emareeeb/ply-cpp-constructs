Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> do_while_loop
Rule 1     do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
Rule 2     condition -> condition IDENTIFIER
Rule 3     condition -> IDENTIFIER
Rule 4     statements -> statement statements
Rule 5     statements -> statement
Rule 6     statement -> do_while_loop
Rule 7     statement -> condition SEMICOLON

Terminals, with rules where they appear

DO                   : 1
IDENTIFIER           : 2 3
LBRACE               : 1
LPAREN               : 1
RBRACE               : 1
RPAREN               : 1
SEMICOLON            : 1 7
WHILE                : 1
error                : 

Nonterminals, with rules where they appear

condition            : 1 2 7
do_while_loop        : 6 0
statement            : 4 5
statements           : 1 4

Parsing method: LALR

state 0

    (0) S' -> . do_while_loop
    (1) do_while_loop -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    DO              shift and go to state 2

    do_while_loop                  shift and go to state 1

state 1

    (0) S' -> do_while_loop .



state 2

    (1) do_while_loop -> DO . LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    LBRACE          shift and go to state 3


state 3

    (1) do_while_loop -> DO LBRACE . statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (4) statements -> . statement statements
    (5) statements -> . statement
    (6) statement -> . do_while_loop
    (7) statement -> . condition SEMICOLON
    (1) do_while_loop -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (2) condition -> . condition IDENTIFIER
    (3) condition -> . IDENTIFIER

    DO              shift and go to state 2
    IDENTIFIER      shift and go to state 8

    statements                     shift and go to state 4
    condition                      shift and go to state 5
    statement                      shift and go to state 6
    do_while_loop                  shift and go to state 7

state 4

    (1) do_while_loop -> DO LBRACE statements . RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 9


state 5

    (7) statement -> condition . SEMICOLON
    (2) condition -> condition . IDENTIFIER

    SEMICOLON       shift and go to state 10
    IDENTIFIER      shift and go to state 11


state 6

    (4) statements -> statement . statements
    (5) statements -> statement .
    (4) statements -> . statement statements
    (5) statements -> . statement
    (6) statement -> . do_while_loop
    (7) statement -> . condition SEMICOLON
    (1) do_while_loop -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (2) condition -> . condition IDENTIFIER
    (3) condition -> . IDENTIFIER

    RBRACE          reduce using rule 5 (statements -> statement .)
    DO              shift and go to state 2
    IDENTIFIER      shift and go to state 8

    statement                      shift and go to state 6
    statements                     shift and go to state 12
    do_while_loop                  shift and go to state 7
    condition                      shift and go to state 5

state 7

    (6) statement -> do_while_loop .

    DO              reduce using rule 6 (statement -> do_while_loop .)
    IDENTIFIER      reduce using rule 6 (statement -> do_while_loop .)
    RBRACE          reduce using rule 6 (statement -> do_while_loop .)


state 8

    (3) condition -> IDENTIFIER .

    SEMICOLON       reduce using rule 3 (condition -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 3 (condition -> IDENTIFIER .)
    RPAREN          reduce using rule 3 (condition -> IDENTIFIER .)


state 9

    (1) do_while_loop -> DO LBRACE statements RBRACE . WHILE LPAREN condition RPAREN SEMICOLON

    WHILE           shift and go to state 13


state 10

    (7) statement -> condition SEMICOLON .

    DO              reduce using rule 7 (statement -> condition SEMICOLON .)
    IDENTIFIER      reduce using rule 7 (statement -> condition SEMICOLON .)
    RBRACE          reduce using rule 7 (statement -> condition SEMICOLON .)


state 11

    (2) condition -> condition IDENTIFIER .

    SEMICOLON       reduce using rule 2 (condition -> condition IDENTIFIER .)
    IDENTIFIER      reduce using rule 2 (condition -> condition IDENTIFIER .)
    RPAREN          reduce using rule 2 (condition -> condition IDENTIFIER .)


state 12

    (4) statements -> statement statements .

    RBRACE          reduce using rule 4 (statements -> statement statements .)


state 13

    (1) do_while_loop -> DO LBRACE statements RBRACE WHILE . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 14


state 14

    (1) do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN . condition RPAREN SEMICOLON
    (2) condition -> . condition IDENTIFIER
    (3) condition -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    condition                      shift and go to state 15

state 15

    (1) do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition . RPAREN SEMICOLON
    (2) condition -> condition . IDENTIFIER

    RPAREN          shift and go to state 16
    IDENTIFIER      shift and go to state 11


state 16

    (1) do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 17


state 17

    (1) do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .

    $end            reduce using rule 1 (do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 1 (do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 1 (do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    RBRACE          reduce using rule 1 (do_while_loop -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)

